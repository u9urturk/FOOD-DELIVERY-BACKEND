# ==============================================
# Docker Compose - Development Environment
# ==============================================
version: '3.8'

services:
  # ===========================================
  # PostgreSQL Database
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: food-delivery-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: food_delivery
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - food_delivery_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # Redis Cache
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: food-delivery-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - food_delivery_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ===========================================
  # NestJS Application
  # ===========================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: food-delivery-app
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/food_delivery?schema=public
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      SEED_DATABASE: "true"
    ports:
      - "3000:3000"
    networks:
      - food_delivery_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      # Mount logs directory for development
      - ./logs:/app/logs

  # ===========================================
  # Database Administration (pgAdmin)
  # ===========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: food-delivery-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@fooddelivery.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    networks:
      - food_delivery_network
    depends_on:
      - postgres
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # ===========================================
  # Redis Administration (RedisInsight)
  # ===========================================
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: food-delivery-redis-insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    networks:
      - food_delivery_network
    depends_on:
      - redis
    volumes:
      - redisinsight_data:/db

# ===========================================
# Networks
# ===========================================
networks:
  food_delivery_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===========================================
# Volumes
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  redisinsight_data:
    driver: local
